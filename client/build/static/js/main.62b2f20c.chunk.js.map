{"version":3,"sources":["components/Templates/ToggleSwitch/ToggleSwitch.js","utilities/configurations.js","utilities/validators.js","components/FileConfig/FileConfig.js","components/FileResults/FileResults.js","App.js","serviceWorker.js","index.js"],"names":["ToggleSwitch","id","label","checked","round","onToggle","className","type","defaultChecked","onChange","e","target","htmlFor","configurations","allowedFileExts","downloadLinkMaxTime","filename","langCodes","eng","fre","ger","ita","por","spa","rus","languages","english","french","validators","patterns","inputName","indexOf","validate","props","name","inputValue","value","inputRequired","required","pattern","valid","length","test","classList","remove","add","FileConfig","useTranslation","t","fileExtensions","langCodesMap","Object","assign","keyName","entries","selectFileRef","useRef","mappingRefs","Map","forEach","key","set","refCheckbox","createRef","refColumn","useState","file","setFile","fileContent","setFileContent","columnId","mapping","setMapping","setFilename","iso6391Code","setISO6391Code","formValid","setFormValid","activeTranslation","find","lang","onToggleLanguage","get","current","disabled","prevState","validForm","inputsNodeList","querySelectorAll","inputsValidity","Array","from","filter","input","map","every","generateFile","a","preventDefault","filesContent","keyNameCol","index","keys","includes","langCode","fname","replace","row","col","jsonKeyName","jsonValue","toUpperCase","sort","reduce","acc","fetch","method","headers","body","JSON","stringify","response","json","onGenerateDownloadLink","showDownloadLink","onSubmit","noValidate","accept","files","reader","FileReader","onload","fileData","result","data","readAsBinaryString","ref","onClick","click","href","placeholder","defaultValue","onInput","onBlur","requried","FileResults","App","i18n","downloadLink","setDownloadLink","changeLanguage","lng","language","author","Boolean","window","location","hostname","match","i18next","use","detector","init","fallbackLng","debug","interpolation","escapeValue","resources","en","default","locale_eng","fr","locale_fra","ReactDOM","render","StrictMode","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62b2f20c.chunk.js","sourcesContent":["import React from 'react'\n\nfunction ToggleSwitch({ id, label, checked = false, round = false, onToggle }) {\n  const onChange = (e) => {\n    const checked = e.target.checked\n    onToggle(checked)\n  }\n\n  return (\n    <div className=\"switch-wrapper\">\n      <label className=\"switch\">\n        <input type=\"checkbox\" id={id} defaultChecked={checked} onChange={onChange} />\n        <span className={round ? 'slider round' : 'slider'}></span>\n      </label>\n      <label htmlFor={id}>{label}</label>\n    </div>\n  )\n}\n\nexport default ToggleSwitch\n","const configurations = {\n  allowedFileExts: '.csv,.xls,.xlsb,.xlsm,.xlsx',\n  downloadLinkMaxTime: 60,\n  filename: 'translations.{lang}',\n  langCodes: {\n    eng: ['eng', 'en'],\n    fre: ['fre', 'fr'],\n    ger: ['ger', 'de'],\n    ita: ['ita', 'it'],\n    por: ['por', 'pt'],\n    spa: ['spa', 'es'],\n    rus: ['rus', 'ru']\n  },\n  languages: {\n    english: 'English',\n    french: 'FranÃ§ais'\n  }\n}\n\nexport default configurations\n","const validators = {\n  patterns: (inputName) => {\n    if (inputName === 'file') return /^[^\\s]+$/\n    if (inputName === 'filename') return /^(\\w|-|(\\.(?!\\.+))?)*\\{lang\\}(\\w|-|(\\.(?!\\.+))?)*$/\n    if (inputName === 'mapColumn0') return /^\\d+$/\n    if (inputName.indexOf('mapColumn') !== -1) return /.*/\n  },\n  validate: (props) => {\n    const inputName = props.name\n    const inputValue = props.value\n    const inputRequired = props.required\n    const pattern = validators.patterns(inputName)\n    let valid = true\n\n    if (inputRequired) {\n      valid = pattern.test(inputValue)\n    } else {\n      if (inputValue.length > 0) {\n        valid = pattern.test(inputValue)\n      }\n    }\n\n    // Set error class for invalid inputs\n    !valid ? props.classList.add('validation-error') : props.classList.remove('validation-error')\n\n    return valid\n  }\n}\n\nexport default validators\n","import React, { useState, useRef, createRef } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { ToggleSwitch } from 'components/Templates/templates'\nimport { configurations, validators } from 'utilities/utilities'\n\nfunction FileConfig(props) {\n  const [t] = useTranslation('default')\n  const fileExtensions = configurations.allowedFileExts\n  const langCodesMap = Object.assign({ keyName: [] }, configurations.langCodes)\n  const langCodes = Object.entries(langCodesMap)\n  const selectFileRef = useRef(null)\n  const mappingRefs = new Map()\n  langCodes.forEach(([key, value]) => mappingRefs.set(key, { refCheckbox: createRef(), refColumn: createRef() }))\n  const [file, setFile] = useState(null)\n  const [fileContent, setFileContent] = useState([])\n  const [mapping, setMapping] = useState({\n    keyName: { checked: true, columnId: null },\n    eng: { checked: true, columnId: null },\n    fre: { checked: true, columnId: null },\n    ger: { checked: false, columnId: null },\n    ita: { checked: false, columnId: null },\n    por: { checked: false, columnId: null },\n    rus: { checked: false, columnId: null },\n    spa: { checked: false, columnId: null }\n  })\n  const [filename, setFilename] = useState(configurations.filename)\n  const [iso6391Code, setISO6391Code] = useState(false)\n  const [formValid, setFormValid] = useState(true)\n\n  const selectFile = () => selectFileRef.current.click()\n\n  const onFileChange = (e) => {\n    const file = e.target.files[0]\n\n    if (file) {\n      const reader = new FileReader()\n\n      reader.onload = async (e) => {\n        const response = await fetch('/api/file/read', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ fileData: e.target.result }),\n        })\n\n        const body = await response.json()\n        setFileContent(body.data)\n      }\n\n      reader.readAsBinaryString(file)\n      setFile(file)\n    }\n  }\n\n  const activeTranslation = (key) => Object.entries(mapping)\n    .find(([lang, { checked, columnId }]) => lang === key && checked)\n\n  const onToggleLanguage = (key, checked = true) => {\n    mappingRefs.get(key).refColumn.current.disabled = !checked\n    setMapping((prevState) => ({ ...prevState, [key]: { checked, columnId: mappingRefs.get(key).refColumn.current.value } }))\n  }\n\n  const onFilenameChange = (e) => setFilename(e.target.value)\n\n  const onFilenameBlur = (e) => {\n    if (filename.length === 0) setFilename(configurations.filename)\n  }\n\n  const onToggleISOCode = (checked) => setISO6391Code(checked)\n\n  const validForm = (e) => {\n    const inputsNodeList = e.target.querySelectorAll('input, select')\n    const inputsValidity = Array.from(inputsNodeList)\n      .filter(input => input.type !== 'checkbox')\n      .map(input => validators.validate(input))\n\n    setFormValid(inputsValidity.every(valid => valid))\n\n    if (formValid) return true\n  }\n\n  const generateFile = async (e) => {\n    e.preventDefault()\n\n    const filesContent = {}\n    let keyNameCol = null\n\n    if (!validForm(e)) return\n\n    Object.entries(mapping)\n      .filter(([lang, { checked, columnId }]) => checked)\n      .forEach(([lang, { checked, columnId }], index) => {\n        if (index === 0) keyNameCol = columnId\n        if (Object.keys(configurations.langCodes).includes(lang)) {\n          const langCodes = configurations.langCodes[lang]\n          const langCode = iso6391Code ? langCodes[1] : langCodes[0]\n\n          // Set language code in filename based on user's selection\n          const fname = `${filename.replace(/{lang}/gi, langCode)}.json`\n\n          filesContent[fname] = {}\n\n          // Create json content\n          for (let row = 1; row < fileContent.length; row++) {\n            for (let col = 1; col < fileContent[row].length; col++) {\n              const jsonKeyName = fileContent[row][keyNameCol]\n              const jsonValue = fileContent[row][columnId] || `${langCode.toUpperCase()} â ${jsonKeyName}`\n              filesContent[fname] = { ...filesContent[fname], [jsonKeyName]: jsonValue }\n            }\n          }\n\n          // Sort json keys in ascending order\n          filesContent[fname] = Object.keys(filesContent[fname])\n            .sort()\n            .reduce((acc, key) => ({\n              ...acc, [key]: filesContent[fname][key]\n            }), {})\n        }\n      })\n\n    const response = await fetch('/api/file/generate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ filesContent }),\n    })\n\n    const body = await response.json()\n    props.onGenerateDownloadLink(body.showDownloadLink)\n  }\n\n  return (\n    <section className=\"file__config\">\n      <form onSubmit={generateFile} noValidate>\n        <section className=\"step__selectFile--current\">\n          <input type=\"file\" name=\"file\" accept={fileExtensions}\n            onChange={onFileChange} ref={selectFileRef} required />\n          <button type=\"button\" className={file ? 'select__file--valid' : 'select__file'}\n            id=\"selectFile\" onClick={selectFile}>\n            {file ? file.name : t('fileConfig.selectFile')}\n          </button>\n          <span className=\"hint\">{t('fileConfig.selectFileHint')}</span>\n\n          <small>\n            <span>{t('fileConfig.exampleFile')}</span> <a href=\"files/translations.csv\">{t('fileConfig.exampleFileCSV')}</a> <a href=\"files/translations.xlsx\">{t('fileConfig.exampleFileExcel')}</a>\n          </small>\n        </section>\n\n        <section className=\"step__mapping\">\n          <h3>{t('fileConfig.availableLanguages')}</h3>\n          <span className=\"hint\">{t('fileConfig.availableLanguagesInstructions')}</span>\n\n          {langCodes.map(([key, langCode], index) => <div className=\"row\" key={index}>\n            <div className=\"col\">\n              {index !== 0 && <ToggleSwitch id=\"mapping\" checked={activeTranslation(key)} onToggle={checked => onToggleLanguage(key, checked)} ref={mappingRefs.get(key).refCheckbox} />}\n            </div>\n            <div className={activeTranslation(key) ? 'col' : 'col deactivated'}>\n              {t(`configs.langCodes.${key}`)}\n            </div>\n            <div className=\"col\">\n              <select name={`mapColumn${index}`} disabled={!activeTranslation(key)} onChange={() => onToggleLanguage(key)} ref={mappingRefs.get(key).refColumn} required={activeTranslation(key)}>\n                <option></option>\n                {fileContent[0]?.map((value, index) => value && <option key={index} value={index}>\n                  {value}\n                </option>)}\n              </select>\n            </div>\n          </div>)}\n        </section>\n\n        <section className=\"step__setFilename\">\n          <h3>{t('fileConfig.filename')}</h3>\n          <span className=\"hint\">{t('fileConfig.filenameInstructions')}</span>\n\n          <div className=\"filename-name\">\n            <div className=\"input-group\">\n              <input type=\"text\" name=\"filename\"\n                placeholder={configurations.filename} defaultValue={configurations.filename}\n                value={filename}\n                onInput={onFilenameChange} onBlur={onFilenameBlur} requried />\n              <span>.json</span>\n            </div>\n          </div>\n\n          <div className=\"filename-lang-code\">\n            <ToggleSwitch id=\"ISO639-1Code\" label={t('fileConfig.isoCodePlaceholder')} onToggle={onToggleISOCode} />\n          </div>\n\n          <div className=\"filename-preview\">\n            {filename && `${filename.replace(/{lang}/gi, iso6391Code ? 'en' : 'eng')}.json`}\n          </div>\n        </section>\n\n        <section className=\"step__generateFile\">\n          <button type=\"submit\">\n            {t('fileConfig.generateFile')}\n          </button>\n\n          {!formValid && <span className=\"error\">{t('fileConfig.formErrorMsg')}</span>}\n        </section>\n      </form>\n    </section>\n  )\n}\n\nexport default FileConfig\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\n// import { configurations } from 'utilities/utilities'\n\nfunction FileResults({ showDownloadLink }) {\n  const [t] = useTranslation('default')\n\n  return (\n    <section className=\"file__results\">\n      {showDownloadLink ? [\n        <div>\n          {t('fileResults.downloadText')} <a href=\"http://localhost:5000/api/file/download\">{t('fileResults.downloadLink')}</a>\n        </div>,\n        // <span className=\"hint\">\n        //   {t('fileResults.downloadInstruction', { time: configurations.downloadLinkMaxTime })}\n        // </span>\n      ] : null}\n    </section>\n  )\n}\n\nexport default FileResults\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next'\nimport { FileConfig, FileResults } from './components/components';\nimport { configurations } from 'utilities/utilities';\n\nfunction App() {\n  const [t, i18n] = useTranslation('default')\n  const [downloadLink, setDownloadLink] = useState(false)\n  const onGenerateDownloadLink = (showDownloadLink) => setDownloadLink(showDownloadLink)\n\n  const changeLanguage = (lng) => i18n.changeLanguage(lng)\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>{t('app.title')}</h1>\n        {i18n.language === 'fr' ? <button onClick={() => changeLanguage('en')}>{configurations.languages.english}</button> : <button onClick={() => changeLanguage('fr')}>{configurations.languages.french}</button>}\n      </header>\n      <main>\n        <FileConfig onGenerateDownloadLink={onGenerateDownloadLink}></FileConfig>\n        <FileResults showDownloadLink={downloadLink}></FileResults>\n      </main>\n      <footer>\n        {t('app.credits', { author: 'Chelny Duplan' })}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport i18next from 'i18next'\nimport detector from 'i18next-browser-languagedetector'\nimport locale_eng from './translations/eng.json'\nimport locale_fra from './translations/fra.json'\nimport { I18nextProvider } from 'react-i18next'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\ni18next\n  .use(detector)\n  .init({\n    fallbackLng: ['en', 'fr'],\n    debug: false,\n    interpolation: { escapeValue: false },  // React already does escaping\n    resources: {\n      en: {\n        default: locale_eng                 // 'default' is our custom namespace\n      },\n      fr: {\n        default: locale_fra\n      },\n    }\n  })\n\nReactDOM.render(\n  <React.StrictMode>\n    <I18nextProvider i18n={i18next}>\n      <App />\n    </I18nextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}